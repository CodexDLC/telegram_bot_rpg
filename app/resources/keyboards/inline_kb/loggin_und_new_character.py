# app/keyboards/inline.py
import logging
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.resources.texts.buttons_callback import Buttons




log = logging.getLogger(__name__)



def get_start_adventure_kb() -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ".
    """
    kb = InlineKeyboardBuilder()

    for key, value in Buttons.START.items():
        kb.button(text=value, callback_data=key)

    return kb.as_markup()


def gender_kb() -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞.
    """
    kb = InlineKeyboardBuilder()

    for key, value in Buttons.GENDER.items():
        kb.button(text=value, callback_data=key)

    return kb.as_markup()

def confirm_kb() -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    kb = InlineKeyboardBuilder()

    for key, value in Buttons.TUTORIAL_START_BUTTON.items():
        kb.button(text=value, callback_data=key)

    return kb.as_markup()


def tutorial_kb(data: dict[str, str]) -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Ç—É—Ç–æ—Ä–∏–∞–ª.
    """

    kb = InlineKeyboardBuilder()
    if data:
        for key, value in data.items():
            kb.button(text=value, callback_data=key)
            kb.adjust(1)

    return kb.as_markup()



# ===== Login –∏ –ò–Ω–∏—Ü–∏–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ –≤—ã–±–æ—Ä—É –∏–≥—Ä–æ–∫–∞, –∞ –Ω–µ –ø–µ—Ä–≤–æ–≥–æ=====

def get_character_lobby_kb(
    characters: list,
    selected_char_id: int | None,
    max_slots: int = 4
) -> InlineKeyboardMarkup:

    """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é –ª–æ–±–±–∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    """

    kb = InlineKeyboardBuilder()
    lobby_data = Buttons.LOBBY

    # === –ë–ª–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (2x2) ===
    for i in range(max_slots):
        if i < len(characters):
            char = characters[i]
            kb.button(
                text=f"{'‚úÖ ' if char.character_id == selected_char_id else 'üë§ '}{char.name}",
                callback_data=f"lobby:select:{char.character_id}"
            )
        else:
            kb.button(text=lobby_data["lobby:create"], callback_data="lobby:create")

    kb.adjust(2, 2)

    # === –ë–ª–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É) ===
    actions = ["logout",]
    for cb in actions:
        kb.row(InlineKeyboardButton(text=lobby_data[cb], callback_data=cb))

    return kb.as_markup()

def get_character_data_bio()-> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ª–æ–≥–∏–Ω–∞ –∏ –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
    """

    lobby_data = Buttons.LOBBY

    kb = InlineKeyboardBuilder()

    for key, value in Buttons.LOBBY_ACTION.items():
        kb.button(text=value, callback_data=key)

    kb.adjust(2)

    actions = ["lobby:action:login",]

    for cb in actions:
        kb.row(InlineKeyboardButton(text=lobby_data[cb], callback_data=cb))

    return kb.as_markup()

